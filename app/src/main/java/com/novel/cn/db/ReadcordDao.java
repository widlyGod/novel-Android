package com.novel.cn.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "READCORD".
*/
public class ReadcordDao extends AbstractDao<Readcord, Long> {

    public static final String TABLENAME = "READCORD";

    /**
     * Properties of entity Readcord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BookId = new Property(1, String.class, "bookId", false, "BOOK_ID");
        public final static Property Chapter = new Property(2, int.class, "chapter", false, "CHAPTER");
        public final static Property PagePos = new Property(3, int.class, "pagePos", false, "PAGE_POS");
        public final static Property VolumePos = new Property(4, int.class, "volumePos", false, "VOLUME_POS");
    }


    public ReadcordDao(DaoConfig config) {
        super(config);
    }
    
    public ReadcordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"READCORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BOOK_ID\" TEXT," + // 1: bookId
                "\"CHAPTER\" INTEGER NOT NULL ," + // 2: chapter
                "\"PAGE_POS\" INTEGER NOT NULL ," + // 3: pagePos
                "\"VOLUME_POS\" INTEGER NOT NULL );"); // 4: volumePos
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"READCORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Readcord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(2, bookId);
        }
        stmt.bindLong(3, entity.getChapter());
        stmt.bindLong(4, entity.getPagePos());
        stmt.bindLong(5, entity.getVolumePos());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Readcord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(2, bookId);
        }
        stmt.bindLong(3, entity.getChapter());
        stmt.bindLong(4, entity.getPagePos());
        stmt.bindLong(5, entity.getVolumePos());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Readcord readEntity(Cursor cursor, int offset) {
        Readcord entity = new Readcord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookId
            cursor.getInt(offset + 2), // chapter
            cursor.getInt(offset + 3), // pagePos
            cursor.getInt(offset + 4) // volumePos
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Readcord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChapter(cursor.getInt(offset + 2));
        entity.setPagePos(cursor.getInt(offset + 3));
        entity.setVolumePos(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Readcord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Readcord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Readcord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
