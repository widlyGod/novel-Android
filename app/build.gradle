apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: '../mobsdk.gradle'


def addFieldsAndPlaceholders = { flavor, items ->
    for (def item : items) {
        flavor.buildConfigField "String", item.key, '"' + item.value + '"'
    }
    flavor.addManifestPlaceholders(items)
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.novel.cn"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        resValue 'string', 'app_name', '云纵文学'
        multiDexEnabled true
    }

    signingConfigs {

        release {
            keyAlias 'app_key'
            keyPassword '123456'
            storeFile file('yunzong.jks')
            storePassword '123456'
        }
    }
    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "true"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            signingConfig signingConfigs.release
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "false"
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "novel"

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }

    productFlavors {
        dev {
            applicationId "dev.novel.cn"
            addFieldsAndPlaceholders(it, [
                    PACKAGE_NAME: applicationId,
            ])
            resValue("string", "app_name", "云纵文学-dev")
        }

        beta {
            applicationId "beta.novel.cn"
            addFieldsAndPlaceholders(it, [
                    PACKAGE_NAME: applicationId,
            ])
            resValue("string", "app_name", "云纵文学-beta")
        }
        me {

        }
    }

    variantFilter { variant ->
        if (variant.buildType.name == "debug") {
            if (!['devDebug', 'betaDebug'].contains(variant.name)) {
                variant.setIgnore(true);
            }
        } else if (['devRelease', 'devRelease', 'betaRelease'].contains(variant.name)) {
            variant.setIgnore(true);
        }
    }
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            //定义apk名字
            def formatedDate = new Date().format("yyyy_MM_dd_HHmmss")
            def apkFileName = "${variant.flavorName}_${android.defaultConfig.versionName}_${formatedDate}.apk";
            outputFileName = apkFileName
        }
    }
    sourceSets { main { assets.srcDirs = ['src/main/assets', 'src/main/assets/'] } }

    androidExtensions {
        experimental = true
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //support
    implementation rootProject.ext.dependencies["cardview-v7"]
    implementation rootProject.ext.dependencies["design"]
    //tools
    //注意 Arms 核心库现在并不会依赖某个 EventBus, 要想使用 EventBus, 还请在项目中自行依赖对应的 EventBus
    //现在支持两种 EventBus, greenrobot 的 EventBus 和畅销书 《Android源码设计模式解析与实战》的作者 何红辉 所作的 AndroidEventBus
    //依赖后 Arms 会自动检测您依赖的 EventBus 并自动注册
    //建议使用 AndroidEventBus, 特别是组件化项目, 原因请看 https://github.com/hehonghui/AndroidEventBus/issues/49
    //这种做法可以让使用者有自行选择三方库的权利, 并且还可以减轻 Arms 的体积
//    implementation rootProject.ext.dependencies["androideventbus"]
    implementation rootProject.ext.dependencies["eventbus"]
    kapt rootProject.ext.dependencies["dagger2-compiler"]
    implementation rootProject.ext.dependencies["progressmanager"]
    implementation rootProject.ext.dependencies["retrofit-url-manager"]
    implementation rootProject.ext.dependencies["lifecyclemodel"]
    implementation rootProject.ext.dependencies["rxbinding"]
    implementation rootProject.ext.dependencies["anko"]
    //arms
    implementation project(':arms')
    //    implementation 'me.jessyan:arms:2.5.0'
    //Arms 核心库不再包含 AndroidAutoLayout, 现在可自行选择屏幕适配方案, 不想使用 AndroidAutoLayout 就不要依赖 arms-autolayout
    //    implementation 'me.jessyan:arms-autolayout:2.5.0'
    //现在已经将 Demo 中的屏幕适配框架从 AndroidAutoLayout 替换为 AndroidAutoSize, AndroidAutoLayout 和 AndroidAutoSize 可以在项目中共存
    //所以旧项目只要依赖 arms-autolayout 即可兼容之前的旧页面, 新页面可以使用 AndroidAutoSize 进行适配, 等有时间了再将旧页面全部替换为 AndroidAutoSize
    implementation rootProject.ext.dependencies["autosize"]
    //Arms 核心库不再包含 Glide, 想使用其他图片加载框架或者想自行扩展 ImageLoaderStrategy 就不要依赖 arms-imageloader-glide
    //依赖 arms-imageloader-glide 后还需要在 GlobalConfiguration 中手动注册 GlideImageLoaderStrategy
    //    implementation 'me.jessyan:arms-imageloader-glide:2.5.0'
    implementation project(':arms-imageloader-glide')
    //test
    testImplementation rootProject.ext.dependencies["junit"]
    debugImplementation rootProject.ext.dependencies["canary-debug"]
    releaseImplementation rootProject.ext.dependencies["canary-release"]
    testImplementation rootProject.ext.dependencies["canary-release"]
    implementation rootProject.ext.dependencies["adapter"]
    implementation rootProject.ext.dependencies["tablayout"]
    implementation rootProject.ext.dependencies["roundview"]
    implementation rootProject.ext.dependencies["dialog"]
    implementation rootProject.ext.dependencies["circleimageview"]
    implementation rootProject.ext.dependencies["refreshLayout"]
//    implementation rootProject.ext.dependencies["multiStateView"]
    implementation rootProject.ext.dependencies["banner"]
    implementation 'com.lijiankun24:shadowlayout:1.1.0'
    implementation rootProject.ext.dependencies["switchbutton"]
    implementation rootProject.ext.dependencies["calligraphy"]
    implementation rootProject.ext.dependencies["flexbox"]
    implementation rootProject.ext.dependencies["shadow-layout"]
    implementation rootProject.ext.dependencies["constraint-layout"]
    implementation rootProject.ext.dependencies["arclayout"]
}
